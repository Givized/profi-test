{"version":3,"sources":["images/t-centralen-liggande.jpeg","images/P7181756.jpg.optimal.jpg","images/1562555.jpg","images/thorildsplan-liggande.jpeg","images/bagarmossen.jpg","images/download.jpeg","data.js","components/station-item.js","components/stations-list.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","data","items","name","line","image","tCentralenImg","description","stadionImg","solnaImg","thorildsplanImg","bagarmossenImg","kungstradgardenImg","StationItem","react_default","a","createElement","className","this","props","itemStyle","style","backgroundImage","item","React","Component","StationsList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","viewType","StationsData","_this2","onClick","setView","map","index","components_station_item","key","type","setState","App","components_stations_list","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80d3c16e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/t-centralen-liggande.6cae008e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/P7181756.jpg.optimal.2a614f50.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1562555.1ffd515c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thorildsplan-liggande.d549aadc.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/bagarmossen.5d0fd7dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/download.0fa13bc0.jpeg\";","import tCentralenImg from './images/t-centralen-liggande.jpeg';\r\nimport stadionImg from './images/P7181756.jpg.optimal.jpg';\r\nimport solnaImg from './images/1562555.jpg';\r\nimport thorildsplanImg from './images/thorildsplan-liggande.jpeg';\r\nimport bagarmossenImg from './images/bagarmossen.jpg';\r\nimport kungstradgardenImg from './images/download.jpeg';\r\n\r\nexport default {\r\n    items:[{\r\n        \"name\": \"T-Centralen\",\r\n        \"line\": \"blue\",\r\n        \"image\": tCentralenImg,\r\n        \"description\": \"T-Centralen, the main hub of Stockholm’s subway, opened up for traffic in 1957 and was the first station to feature artwork. The blue line-platform, quite literally “the blue platform” is hands down one of the public transport system’s most recognizable places. But it didn’t open until 1975 when the blue line to Hjulsta was completed.\"\r\n    },\r\n    {\r\n        \"name\": \"Stadion\",\r\n        \"line\": \"red\",\r\n        \"image\": stadionImg,\r\n        \"description\": \"Each year Östermalms IP serves as the main festival area for the Stockholm Pride festival. By coincidence, the nearby subway station, Stadion, happens to have a beautiful rainbow in vivid colors painted against the bright blue of the station's cave walls to welcome festival goers.\"\r\n    },\r\n    {\r\n        \"name\": \"Solna Centrum\",\r\n        \"line\": \"blue\",\r\n        \"image\": solnaImg,\r\n        \"description\": \"The station of Solna Centrum opened with the first arm of the blue line in 1975. The bright green and red landscape - the green being the forest and the red an evening sun setting behind the treetops - is both timeless in its beauty, but also something that few other stations artwork is; political.\"\r\n    },\r\n    {\r\n        \"name\": \"Thorildsplan\",\r\n        \"line\": \"green\",\r\n        \"image\": thorildsplanImg,\r\n        \"description\": \"Thorildsplan is one of only three street-level surface stations in downtown Stockholm. The station was built in 1952, but the pixelated artwork by Lars Arrhenius is a more recent addition. Arrhenius was commissioned to create new art in 2008, the caveat being that it had to be tile work. Otherwise, he had total creative freedom, but considering his background the material was a perfect fit.\"\r\n    },\r\n    {\r\n        \"name\": \"Bagarmossen\",\r\n        \"line\": \"green\",\r\n        \"image\": bagarmossenImg,\r\n        \"description\": \"Bagarmossen’s old subway station is to date the first and only to have been closed down and taken out of service. Where it once was situated at surface-level there now are residential buildings.\"\r\n    },\r\n    {\r\n        \"name\": \"Kungsträdgården\",\r\n        \"line\": \"blue\",\r\n        \"image\": kungstradgardenImg,\r\n        \"description\": \"One of Stockholm’s most stunning stations is unsurprisingly also one of its most photographed: Kungsträdgården. Located in the middle of downtown Stockholm, it’s the terminus of the blue line, or at least until its southward extension opens in 2025.\"\r\n    }]\r\n}","import React from 'react';\r\nimport '../styles/station-item.scss';\r\n\r\nclass StationItem extends React.Component{\r\n    render(){\r\n        return <article className={'station-item station-item_' + this.props.itemStyle } >\r\n            <div className=\"station-item__image\" style={{'backgroundImage': 'url(' + this.props.item.image + ')'}}>\r\n            </div>\r\n            <div className=\"station-item__text\">\r\n                <h3 className=\"station-item__title\">\r\n                    <span className=\"station-item__name\">{this.props.item.name}</span>\r\n                    <span className={'station-item__line station-item__line_' + this.props.item.line}>\r\n                        {this.props.item.line} line\r\n                    </span>\r\n                </h3>\r\n                <div className=\"station-item__description\">\r\n                    {this.props.item.description}\r\n                </div>\r\n            </div>\r\n        </article>\r\n    }\r\n}\r\n\r\nexport default StationItem;","import React from 'react';\r\nimport StationsData from '../data';\r\nimport StationItem from './station-item';\r\nimport '../styles/stations-list.scss';\r\n\r\nclass StationsList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewType:'list',\r\n      items: StationsData.items\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"stations-list\">\r\n        <header className={\"stations-list__header \" + this.state.viewType}>\r\n          <button onClick={()=>this.setView('list')} className={\"stations-list__button\" + (this.state.viewType === 'list' ? ' stations-list__button_selected' : '')}>\r\n            <div className=\"stations-list__button-content\">\r\n              Списком\r\n            </div>\r\n          </button>\r\n          <button onClick={()=>this.setView('tile')} className={\"stations-list__button\" + (this.state.viewType === 'tile' ? ' stations-list__button_selected' : '')}>\r\n            <div className=\"stations-list__button-content\">\r\n              Плиткой\r\n            </div>\r\n          </button>\r\n        </header>\r\n        <section className={\"stations-list__content stations-list__content_\"+this.state.viewType}>\r\n          {this.state.items.map((item, index)=><StationItem item={item} key={index} itemStyle={this.state.viewType}/>)}\r\n        </section>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n\r\n  setView(type) {\r\n    this.setState({\r\n      viewType: type\r\n    });\r\n  }\r\n}\r\n\r\nexport default StationsList;","import React from 'react';\nimport './styles/app.scss';\n\nimport StationsList from './components/stations-list';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <StationsList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}